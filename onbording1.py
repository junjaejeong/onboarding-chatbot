# -*- coding: utf-8 -*-
"""Colaboratory에 오신 것을 환영합니다

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import openai
import numpy as np

# OpenAI API 키 설정 (예: st.secrets["OPENAI_API_KEY"] 사용 가능)
openai.api_key = st.secrets["OPENAI_API_KEY"]

# 예시 온보딩 데이터
onboarding_data = {
    "목적": "KGM 핵심가치/BI 기반의 조직문화와 시스템 내재화를 통해 ...",
    "교육 대상": "24년 하반기/25년 신규입사자 49명",
    "교육 일정": "2025년 3월 12일(수) ~ 3월 14일(금), 2박 3일 집체교육",
    "교육 장소": "써닝리더십 센터 (경기 용인시 처인구 백암면 고안로 51번길 205)",
    # ... (이하 생략)
}

#############################
# 1) 각 항목을 임베딩해둠
#############################

def get_embedding(text, model="text-embedding-ada-002"):
    """주어진 텍스트를 OpenAI Embedding API로 임베딩하여 numpy 배열을 반환합니다."""
    response = openai.Embedding.create(
        input=[text],
        model=model
    )
    embedding = response["data"][0]["embedding"]
    return np.array(embedding, dtype=np.float32)

# 미리 onboarding_data에 대한 임베딩을 구해놓고 저장
data_embeddings = {}
for key, value in onboarding_data.items():
    # key와 value를 합쳐 하나의 문장으로 임베딩 (예: "교육 일정: 2025년 3월 12일...")
    text_for_embedding = f"{key}: {value}"
    data_embeddings[key] = get_embedding(text_for_embedding)

#############################
# 2) 질문에 대한 임베딩 → 가장 유사한 항목 찾기
#############################

def find_best_match(user_query):
    """사용자 질문을 임베딩 후, onboarding_data 중 가장 유사도가 높은 key를 찾아 반환합니다."""
    query_embedding = get_embedding(user_query)

    best_score = -1
    best_key = None

    for key, emb in data_embeddings.items():
        # 코사인 유사도 계산
        dot = np.dot(query_embedding, emb)
        norm_q = np.linalg.norm(query_embedding)
        norm_d = np.linalg.norm(emb)
        cosine_sim = dot / (norm_q * norm_d)

        if cosine_sim > best_score:
            best_score = cosine_sim
            best_key = key

    return best_key, best_score

#############################
# 3) 실제로 FAQ 매칭 후 답변
#############################

def get_onboarding_info(user_query, threshold=0.65):
    """
    사용자 질문을 임베딩하여 onboarding_data 중 가장 유사한 항목을 찾고,
    유사도가 threshold 이상이면 해당 항목을 반환, 아니면 None 반환.
    """
    key, score = find_best_match(user_query)
    if score >= threshold:
        return onboarding_data[key]
    else:
        return None

#############################
# 사용 예시
#############################

while True:
    user_input = input("질문을 입력하세요 (종료: q): ")
    if user_input.lower() == "q":
        break

    # 임베딩 매칭 시도
    answer = get_onboarding_info(user_input)

    if answer is not None:
        print("onboarding_data에서 찾은 답변:", answer)
    else:
        # 유사도가 낮으면 ChatGPT API로 넘기는 로직 (선택 사항)
        print("onboarding_data에 없으므로 ChatGPT에 물어봅니다.")
        # 여기서 openai.ChatCompletion.create(...) 사용